return {
	{  -- File
		"File",
		{ "entire selection (C-a)", ':call feedkeys("GVgg")' },
		{ "save current file (C-s)", ":w" },
		{ "save all files (C-A-s)", ":wa" },
		{ "quit (C-q)", ":qa" },
		{ "search word (l-g)", ":lua require('telescope.builtin').live_grep()", 1 },
		{ "git files", ":lua require('telescope.builtin').git_files()", 1 },
		{ "files (C-f)", ":lua require('telescope.builtin').find_files()", 1 },
		{ "source current file", ":so %<cr>" },
    { "Close current buffer (F4)", ":Bdelete" },
	},
	{  -- Vim
		"Vim",
		{ "reload vimrc", ":source $MYVIMRC" },
		{ "check health", ":checkhealth" },
		{ "jumps (Alt-j)", ":lua require('telescope.builtin').jumplist()" },
		{ "commands", ":lua require('telescope.builtin').commands()" },
		{ "command history", ":lua require('telescope.builtin').command_history()" },
		{ "registers (A-e)", ":lua require('telescope.builtin').registers()" },
		{ "colorshceme", ":lua require('telescope.builtin').colorscheme()", 1 },
		{ "vim options", ":lua require('telescope.builtin').vim_options()" },
		{ "keymaps", ":lua require('telescope.builtin').keymaps()" },
		{ "buffers", ":Telescope buffers" },
		{ "search history (C-h)", ":lua require('telescope.builtin').search_history()" },
		{ "paste mode", ":set paste!" },
		{ "cursor line", ":set cursorline!" },
		{ "cursor column", ":set cursorcolumn!" },
		{ "spell checker", ":set spell!" },
		{ "relative number", ":set relativenumber!" },
		{ "search highlighting (F12)", ":set hlsearch!" },
	},
	{  -- Telescope
		"Telescope",
		{ "Telescope find_files (ff)", ":Telescope find_files" },
		{ "Telescope live_grep (lg)", ":Telescope live_grep" },
		{ "Telescope buffers (<leader>\\)", ":Telescope buffers" },
		{ "Telescope help_tags (<leader>;)", ":Telescope help_tags" },
		{ "Telescope zoxide (<leader>z)", ":lua require('telescope').extensions.zoxide.list{}" },
		{ "Telescope projects (<leader>p)", ":Telescope projects" },
		{ "Telescope harpoon marks (<leader>hp)", ":Telescope harpoon marks" },
		{ "Telescope command_palette (<leader>cp)", ":Telescope command_palette" },
		{ "Telescope hop (C-h)", "" },
		{ "Telescope ctags_outline current buffer", ":Telescope ctags_outline outline" },
		{ "Telescope ctags_outline all buffers", ":require('telescope').extensions.ctags_outline.outline({buf='all'})",},
		{ "Telescope yanky history", ":Telescope yank_history" },
		{ "Telescope emoji", ":Telescope emoji" },
		{ "Telescope notify", ":Telescope notify" },
    { "Fzf-lua (fz)", ":FzfLua files" },
	},
	{  -- Editing Support
		"Editing Support",
		{ "init_selection", ",s" }, -- back by treesitter
		{ "node_incremental", ",s" }, -- back by treesitter
		{ "scope_incremental", ",n" }, -- back by treesitter
		{ "node_decremental", ",n" }, -- back by treesitter
		{ "yeet surround", "ys{motion}{char}" }, -- back by nvim-surround
		{ "delete surround", "ds{char}" }, -- back by nvim-surround
		{ "change surround", "cs{target}{replacement}" }, -- back by nvim-surround
		{ "yeet function surround", "ys{motion}f" }, -- back by nvim-surround
		{ "delete function surround", "dsf" }, -- back by nvim-surround
		{ "Formatting", ":lua vim.lsp.buf.format({ async = true })" }, -- back by lsp
	},
  {  -- Comment
    "Comment",
    { "Line-comment (gcc)", "" },
    { "Block-comment (gbc)", "" },
    { "Add comment on the line above (gcO)", "" },
    { "Add comment on the line below (gco)", "" },
    { "Add comment at the end of the line (gcA)", "" },
  },
  {  -- TODO-comment
    "TODO-comment",
    { "A quickfix list to show all todos in your project.", ":TodoQuickFix" },
    { "A location list to show all todos in your project.", ":TodoLocList" },
    { "Search through all project todos with Telescope", ":TodoTelescope" },
  },
  {  -- Lsp & Lspsaga
    "Lsp & Lspsaga",
    -- Lsp
    { "Telescope lsp_definitions (gd)", ":Telescope lsp_definitions" },
    { "Telescope lsp_implementations (gI)", ":Telescope lsp_implementations" },
    { "Telescope lsp_references (gr)", ":Telescope lsp_references" },
    { "Open signature_help (gs)", ":lua vim.lsp.buf.signature_help()" },
    { "Format (<leader>-f)", ":Format" },
    { "Code action (<leader>ca)", ":lua vim.lsp.buf.code_action()" },
    { "LspToggleAutoFormat", ":LspToggleAutoFormat" },
    { "Lsp rename (rn)", ":lua vim.lsp.buf.rename()" },
    -- Lspsaga
    { "Lspsaga show_line_diagnostics (gl)", "Lspsaga show_line_diagnostics" },
    { "Lspsaga show_cursor_diagnostics (gcl)", "Lspsaga show_cursor_diagnostics" },
    { "Lspsaga diagnostic_jump_next (C-j)", ":Lspsaga diagnostic_jump_next" },
    { "Lspsaga diagnostic_jump_prev (C-k)", ":Lspsaga diagnostic_jump_prev" },
    { "Lspsaga preview_definition (gp)", ":Lspsaga preview_definition" },
    { "Lspsaga lsp_finder (gsf)", ":Lspsaga lsp_finder" },
    { "Lspsaga hover_doc (K)", ":Lspsaga hover_doc" },
    { "Lspsaga rename (rn)", ":Lspsaga rename" },
    { "Lspsaga code_action", ":Lspsaga code_action" },
    { "Lspsaga range_code_action", ":Lspsaga range_code_action" },
  },
  {  -- NvimTree
    "NvimTree",
    { "Open NvimTree (C-n)", ":NvimTreeToggle" },
    { "Refresh NvimTree (F5)", ":NvimTreeRefresh" },
    { "Find file in NvimTree (<leader>-n)", ":NvimTreeFindFile" },
  },
  {  -- Find & replace
    "Find & replace( inc-rename & Spectre & Lspsaga & Lsp )",
    { "Inc-rename", ':IncRename ' },
    { "Global find & replace (<leader>S)", ':lua require("spectre").open()' },
    { "In-file find & replace (<leader>s)", ':lua require("spectre").open_file_search()' },
    { "Lspsaga rename (<F2>)", ":Lspsaga rename" },
    { "Lsp rename (rn)", ":lua vim.lsp.buf.rename()" },
  },
  {  -- Git
    "Git ( git.nvim & git-conflict )",
    { "Open blame buffer (<leader>gb)", "" },
    { "Browse git files (<leadergo>)", "" },
    { "Select the current changes (co)", ":GitConflictChooseOurs" },
    { "Select the incoming changes (ct)", ":GitConflictChooseTheirs" },
    { "Select both changes (cb)", ":GitConflictChooseBoth" },
    { "Select none of the changes (c0)", ":GitConflictChooseNone" },
    { "Move to the next conflict ([x)", ":GitConflictNextConflict" },
    { "Move to the previous conflict (]x)", ":GitConflictPrevConflict" },
    { "Get all conflict to quickfix", ":GitConflictListQf" },
  },
  {  -- Hop
    "Hop",
    { "HopWord (<leader>h)", ":HopWord" },
    { "HopLine (<leader>l)", ":HopLine" },
  },
  {  -- Harpoon
    "Harpoon",
    { "Add file to harpoon (<leader>hm)", ':lua require("harpoon.mark").add_file()' },
    { "Open harpoon menu (<leader>ha)", ':lua require("harpoon.ui").toggle_quick_menu()' },
    { "Harpoon to the next file (<leader>hj)", ':lua require("harpoon.ui").nav_next()' },
    { "Harpoon to the previous file (<leader>hk)", ':lua require("harpoon.ui").nav_prev()' },
    { "Go to a new tmux window (<leader>htm)", ':lua require("harpoon.tmux").gotoTerminal(1)' },
  },
  {  -- Markdown
    "Markdown",
    { "Open the md url link under the cursor in Vim (ge)", "" },
    { "Go to next header (]])", "" },
    { "Go to previous header ([[)", "" },
    { "Go to current header ([h)", "" },
    { "Go to parent header ([u)", "" },
    { "Create a toc with headers", ":Toc"},
    { "Insert toc table in current line", ":InsertToc" },
    { "Specify how many levels of headers to display in toc", ":InsertToc 3" },
    { "Add numbered list to `h2` headers", ":InsertNToc" },
  },
  {  -- Toggleterm
    "Toggleterm",
    { "Open Toggleterm (<C-\\>)", ":ToggleTerm" },
    { "Lazygit", ":lua _LAZYGIT_TOGGLE()" },
    { "Htop", ":lua _HTOP_TOGGLE()"},
    { "Python", ":lua _PYTHON_TOGGLE()" },
    { "Nvidia-smi", ":lua _NVSMI_TOGGLE()" },
  },
  -- {  -- Mkdnflow
  --   "Mkdnflow",
  --   {  },

  -- },
}
	-- {
	--   "Help",
	--   { "tips", ":help tips" },
	--   { "cheatsheet", ":help index" },
	--   { "tutorial", ":help tutor" },
	--   { "summary", ":help summary" },
	--   { "quick reference", ":help quickref" },
	--   { "search help(F1)", ":lua require('telescope.builtin').help_tags()", 1 },
	-- },
