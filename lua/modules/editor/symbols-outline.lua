local icons = {
	kind = require("modules.ui.icons").get("kind", true),
	type = require("modules.ui.icons").get("type", true),
	ui = require("modules.ui.icons").get("ui"),
}

local prefix = "LspSagaWinbar"

require("symbols-outline").setup({
	highlight_hovered_item = false, -- High cpu usage
	show_guides = true,
	auto_preview = false, -- doesn't seem to work
	position = "right",
	relative_width = true,
	width = 35,
	auto_close = false,
	show_numbers = true,
	show_relative_numbers = true,
	show_symbol_details = true,
	preview_bg_highlight = "Pmenu",
	autofold_depth = nil,
	auto_unfold_hover = true,
	fold_markers = { icons.ui.ArrowClosed, icons.ui.ArrowOpen },
	wrap = false,
	winblend = 10, -- Pseudo-transparency of preview window
	keymaps = { -- These keymaps can be a string or a table for multiple keys
		close = { "<Esc>", "q" },
		goto_location = "<Cr>",
		focus_location = "o",
		hover_symbol = "<C-space>",
		toggle_preview = "K",
		rename_symbol = "r",
		code_actions = "a",
		fold = "h",
		unfold = "l",
		fold_all = "W",
		unfold_all = "E",
		fold_reset = "R",
	},
	lsp_blacklist = {},
	symbol_blacklist = {},
	symbols = {
		Class = { icon = icons.kind.Class, hl = prefix .. "Class" },
		Constant = { icon = icons.kind.Constant, hl = prefix .. "Constant" },
		Constructor = { icon = icons.kind.Constructor, hl = prefix .. "Constructor" },
		Enum = { icon = icons.kind.Enum, hl = prefix .. "Enum" },
		EnumMember = { icon = icons.kind.EnumMember, hl = prefix .. "EnumMember" },
		Event = { icon = icons.kind.Event, hl = prefix .. "Event" },
		Field = { icon = icons.kind.Field, hl = prefix .. "Field" },
		File = { icon = icons.kind.File, hl = prefix .. "File" },
		Function = { icon = icons.kind.Function, hl = prefix .. "Function" },
		Interface = { icon = icons.kind.Interface, hl = prefix .. "Interface" },
		Key = { icon = icons.kind.Keyword, hl = prefix .. "Key" },
		Method = { icon = icons.kind.Method, hl = prefix .. "Method" },
		Module = { icon = icons.kind.Module, hl = prefix .. "Module" },
		Namespace = { icon = icons.kind.Namespace, hl = prefix .. "Namespace" },
		Operator = { icon = icons.kind.Operator, hl = prefix .. "Operator" },
		Package = { icon = icons.kind.Package, hl = prefix .. "Package" },
		Property = { icon = icons.kind.Property, hl = prefix .. "Property" },
		Struct = { icon = icons.kind.Struct, hl = prefix .. "Struct" },
		TypeParameter = { icon = icons.kind.TypeParameter, hl = prefix .. "TypeParameter" },
		Variable = { icon = icons.kind.Variable, hl = prefix .. "Variable" },
		-- Type
		Array = { icon = icons.type.Array, hl = prefix .. "Array" },
		Boolean = { icon = icons.type.Boolean, hl = prefix .. "Boolean" },
		Null = { icon = icons.type.Null, hl = prefix .. "Null" },
		Number = { icon = icons.type.Number, hl = prefix .. "Number" },
		Object = { icon = icons.type.Object, hl = prefix .. "Object" },
		String = { icon = icons.type.String, hl = prefix .. "String" },
	},
})
